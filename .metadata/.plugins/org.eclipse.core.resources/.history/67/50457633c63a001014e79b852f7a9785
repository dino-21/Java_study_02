package ex05;



class A {
}

class B extends A {
}

class C extends B {
}

class Box<T extends A> { // T 전달될 수있는 대상은 A거나 A 하위(자손) 클래스만 가능
	private T obj;

	public T getObj() {
		return obj;
	}

	public void setObj(T obj) { // public void setObj(A obj)
		this.obj = obj;
	}
}

public class 타입제한하기 {
	/*
	Box<T extends A> → T는 A 또는 A의 하위 클래스만 가능
	Box<A> → A, B, C 객체 모두 set 가능. 하지만 get은 A 타입으로만 반환됨
	Box<B> → B, C 객체만 set 가능. get은 B 타입으로 반환됨
	Box<C> → C 객체만 set 가능. get은 C 타입으로 반환됨
	*/
	
	
	public static void main(String[] args) {
		// Box<A>는 A 타입으로 선언되었기 때문에,
		// setObj에는 A 또는 A의 하위 객체(B, C 등)를 넣을 수 있고,
		// getObj는 항상 A 타입으로 반환된다. (하위 타입 사용 시 다운캐스팅 필요)
		Box<A> aBox = new Box();

		// Box<B>는 B 타입으로 선언되었기 때문에,
		// setObj에는 B 또는 그 하위 타입(C 등)을 넣을 수 있고,
		// getObj는 항상 B 타입으로 반환된다.
		Box<B> bBox = new Box();

		// Box<C>는 C 타입으로 선언되었기 때문에,
		// setObj에는 C 타입 객체만 넣을 수 있고,
		// getObj는 항상 C 타입으로 반환된다.
		Box<C> cBox = new Box();

		aBox.setObj(new A());
		A a = aBox.getObj();

		aBox.setObj(new B());
		B b = (B) aBox.getObj();

		aBox.setObj(new C());
		C c = (C) aBox.getObj();

//		Box<String> sBox = new Box();
//		Box<Integer> iBox = new Box();
	}

}



